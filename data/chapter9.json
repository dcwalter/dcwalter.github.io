{
  "110": "def blendSounds():\n\tbass = makeSound(\"bassoon-c4.wav\")\n\taah = makeSound(\"aah.wav\")\n\tcanvas = makeEmptySoundBySeconds(3)\n\tfor index in range(0,20000):\n\t\taahSample = getSampleValueAt(aah,index)\n\t\tsetSampleValueAt(canvas,index,aahSample)\n\tfor index in range(0,20000):\n\t\taahSample = getSampleValueAt(aah,index+20000)\n\t\tbassSample=getSampleValueAt(bass,index)\n\t\tnewSample = 0.5*aahSample + 0.5*bassSample\n\t\tsetSampleValueAt(canvas,index+20000,newSample)\n\tfor index in range(20000,40000):\n\t\tbassSample = getSampleValueAt(bass,index)\n\t\tsetSampleValueAt(canvas,index+20000,bassSample)\n\tplay(canvas)\n\treturn canvas",
  "111": "def echo(delay,s1):\n\ts2 = duplicateSound(s1)\n\tfor index in range(delay, getLength(s1)):\n\t\t# set delay value to original value + delayed value * .6\n\t\techoSample = 0.6*getSampleValueAt(s2, index-delay)\n\t\tcomboSample = getSampleValueAt(s1,index) + echoSample\n\t\tsetSampleValueAt(s1, index,comboSample)\n\tplay(s1)\n\treturn s1",
  "112": "def echoOne(delay, sound):\n\tsoundSamples = getSamples(sound)\n\tfor index in range(len(soundSamples)-delay,0,-1):\n\t\tvalue = getSampleValue(soundSamples[index])\n\t\tvalue2 = getSampleValue(soundSamples[index-delay])\n\t\tsetSampleValue(soundSamples[index],value+value2)",
  "113": "def echoFeedback(sound):\n\tdelay = 5000\n\tsoundSamples = getSamples(sound)\n\tfor index in range(0,len(soundSamples)-delay):\n\t\tvalue = getSampleValue(soundSamples[index])\n\t\tvalue2 = getSampleValue(soundSamples[index+delay])\n\t\tsetSampleValue(soundSamples[index+delay],value+value2)",
  "114": "def echoes(s1, delay,num):\n\t# Create a new snd, that echoes the input soundfile\n\t# num number of echoes, each delay apart\n\tends1 = getLength(s1)\n\tends2 = ends1 + (delay * num)\n\ts2 = makeEmptySound(ends2)\n\n\techoAmplitude = 1.0\n\tfor echoCount in range(1,num):\n\t\t# 60% smaller each time\n\t\techoAmplitude = echoAmplitude * 0.6\n\t\tfor posns1 in range(0,ends1):\n\t\t\tposns2 = posns1+(delay*echoCount)\n\t\t\tvalues1 = getSampleValueAt(s1,posns1)*echoAmplitude\n\t\t\tvalues2 = getSampleValueAt(s2,posns2)\n\t\t\tsetSampleValueAt(s2,posns2,values1+values2)\n\tplay(s2)\n\treturn s2",
  "115": "def createChord():\n\tc = makeSound(\"bassoon-c4.wav\")\n\te = makeSound(\"bassoon-e4.wav\")\n\tg = makeSound(\"bassoon-g4.wav\")\n\tchord = makeEmptySound(getLength(c))\n\tfor index in range(0,getLength(c)):\n\t\tcValue = getSampleValueAt(c,index)\n\t\teValue = getSampleValueAt(e,index)\n\t\tgValue = getSampleValueAt(g,index)\n\t\ttotal = cValue + eValue + gValue\n\t\tsetSampleValueAt(chord,index,total)\n\treturn chord",
  "116": "def double(source):\n\tlen = getLength(source) / 2 + 1\n\ttarget = makeEmptySound(len)\n\ttargetIndex = 0\n\tfor sourceIndex in range(0, getLength(source), 2):\n\t\tsourceValue = getSampleValueAt(source,sourceIndex)\n\t\tsetSampleValueAt(target, targetIndex, sourceValue)\n\t\ttargetIndex = targetIndex + 1\n\tplay(target)\n\treturn target",
  "117": "def halve(source):\n\ttarget = makeEmptySound(getLength(source) * 2)\n\tsourceIndex = 0\n\tfor targetIndex in range(0, getLength(target)):\n\t\tvalue = getSampleValueAt(source, int(sourceIndex))\n\t\tsetSampleValueAt(target, targetIndex, value)\n\t\tsourceIndex = sourceIndex + 0.5\n\tplay(target)\n\treturn target",
  "118": "def shift(source,factor):\n\ttarget = makeEmptySound(getLength(source))\n\tsourceIndex = 0\n\n\tfor targetIndex in range(0, getLength(target)):\n\t\tsourceValue = getSampleValueAt(source,int(sourceIndex))\n\t\tsetSampleValueAt(target, targetIndex, sourceValue)\n\t\tsourceIndex = sourceIndex + factor\n\n\tplay(target)\n\treturn target",
  "119": "def shift(source,factor):\n\ttarget = makeEmptySound(getLength(source))\n\tsourceIndex = 0\n\n\tfor targetIndex in range(0, getLength(target)):\n\t\tsourceValue = getSampleValueAt(source,int(sourceIndex))\n\t\tsetSampleValueAt(target, targetIndex, sourceValue)\n\t\tsourceIndex = sourceIndex + factor\n\t\tif (sourceIndex >= getLength(source)):\n\t\t\t sourceIndex = 0\n\n\tplay(target)\n\treturn target",
  "120": "def playASequence(inSound):\n\t# Play the sound five times, increasing the frequency\n\tfor factor in range(1,6):\n\t\tsound = duplicateSound(inSound)\n\t\ttarget = shift(sound,factor)\n\t\tblockingPlay(target)",
  "121": "def sineWave(freq,amplitude,secs):\n\n\t# Get a blank sound\n\tbuildSin = makeEmptySoundBySeconds(secs)\n\n\t# Set sound constant\n\tsr = getSamplingRate(buildSin)        # sampling rate\n\n\tinterval = 1.0/freq     # Make sure it's floating point\n\tsamplesPerCycle =  interval * sr    # samples per cycle\n\tmaxCycle = 2 * pi\n\n\tfor pos in range (0,getLength(buildSin)):\n\t\t\trawSample = sin((pos / samplesPerCycle) * maxCycle)\n\t\t\tsampleVal = int(amplitude*rawSample)\n\t\t\tsetSampleValueAt(buildSin,pos,sampleVal)\n\n\treturn buildSin",
  "122": "def addSounds(sound1,sound2):\n\tfor index in range(0,getLength(sound1)):\n\t\ts1Sample = getSampleValueAt(sound1,index)\n\t\ts2Sample = getSampleValueAt(sound2,index)\n\t\tsetSampleValueAt(sound2,index,s1Sample+s2Sample)",
  "123": "def squareWave(freq,amplitude,seconds):\n\n\t# Get a blank sound\n\tsquare = makeEmptySoundBySeconds(seconds)\n\n\t# Set music constants\n\tsamplingRate = getSamplingRate(square)    # sampling rate\n\t# Build tools for this wave\n\t# seconds per cycle: make sure floating point\n\tinterval = 1.0 * seconds / freq\n\t# creates floating point since interval is fl point\n\tsamplesPerCycle = interval * samplingRate\n\t# we need to switch every half-cycle\n\tsamplesPerHalfCycle = int(samplesPerCycle / 2)\n\tsampleVal = amplitude\n\ts = 1\n\ti = 1\n\n\tfor s in range (0, getLength(square)):\n\t\t# if end of a half-cycle\n\t\tif (i > samplesPerHalfCycle):\n\t\t\t# reverse the amplitude every half-cycle\n\t\t\tsampleVal = sampleVal * -1\n\t\t\t# and reinitialize the half-cycle counter\n\t\t\ti = 0\n\t\tsetSampleValueAt(square,s,sampleVal)\n\t\ti = i + 1\n\n\treturn(square)",
  "124": "def triangleWave(freq, theAmplitude, seconds):\n\n\t# Get a blank sound\n\ttriangle = makeEmptySoundBySeconds(seconds)\n\n\t# Set music constants\n\t# use the passed amplitude\n\tamplitude = theAmplitude\n\t# sampling rate (samples per second)\n\tsamplingRate = 22050\n\n\t# Build tools for this wave\n\t# seconds per cycle: make sure floating point\n\tinterval = 1.0 * seconds / freq\n\t# creates floating point since interval is fl point\n\tsamplesPerCycle = interval * samplingRate\n\t# we need to switch every half-cycle\n\tsamplesPerHalfCycle = int(samplesPerCycle / 2)\n\t# value to add for each subsequent sample; must be integer\n\tincrement = int(amplitude / samplesPerHalfCycle)\n\t# start at bottom and increment or decrement as needed\n\tsampleVal = -amplitude\n\ti = 0\n\n\t# create 1 second sound\n\tfor s in range (0, samplingRate):\n\n\t\t# if end of a half-cycle\n\t\tif (i == samplesPerHalfCycle):\n\t\t\t# reverse the increment every half-cycle\n\t\t\tincrement = increment * -1\n\t\t\t# and reinit the half-cycle counter\n\t\t\ti = 0\n\n\t\tsampleVal = sampleVal + increment\n\t\tsetSampleValueAt(triangle,s,sampleVal)\n\t\ti = i + 1\n\n\tplay(triangle)",
  "125": "def song():\n\tplayNote(60,200,127)\n\tplayNote(62,500,127)\n\tplayNote(64,800,127)\n\tplayNote(60,600,127)"
}
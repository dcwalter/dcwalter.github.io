{
"145" : "import urllib\n\ndef findPopulationURL(state):\n\tcon = urllib.urlopen(\"https://www.census.gov/popest/data/state/asrh/2013/files/SCPRC-EST2013-18+POP-RES.csv\")\n\tlines = con.readlines()\n\tcon.close()\n\tfor line in lines:\n\t\tparts = line.split(\",\")\n\t\tif parts[4] == state:\n\t\t\treturn int(parts[5])\n\treturn -1",
"146" : "import urllib\nfrom csv import *\n\ndef findPopulationURL2(state):\n\tcon = urllib.urlopen(\"https://www.census.gov/popest/data/state/asrh/2013/files/SCPRC-EST2013-18+POP-RES.csv\")\n\tcsvfile = reader(con)\n\tfor row in csvfile:\n\t\tif row[4] == state:\n\t\t\treturn int(row[5])\n\treturn -1",
"147" : "from csv import *\n\ndef highestExecutions():\n\tfile = open(getMediaPath(\"Death penalty.csv\"),\"rb\")\n\tcsvfile = reader(file)\n\tmax = -1\n\tmaxcountry = \"None\"\n\tfor row in csvfile:\n\t\ttry:\n\t\t country = row[0]\n\t\t executions = int(row[14])\n\t\t if executions > max:\n\t\t\tmax = executions\n\t\t\tmaxcountry = country\n\t\texcept:\n\t\t\tpass\n\tprint maxcountry,max",
"148" : "def soundToText(sound,filename):\n\tfile = open(filename,\"wt\")\n\tfor s in getSamples(sound):\n\t\tfile.write(str(getSampleValue(s))+\"\\n\")\n\tfile.close()",
"149" : "def textToSound(filename):\n\t#Set up the sound\n\tsound = makeSound(getMediaPath(\"sec3silence.wav\"))\n\tsoundIndex = 0\n\t#Set up the file\n\tfile = open(filename,\"rt\")\n\tcontents=file.readlines()\n\tfile.close()\n\tfileIndex = 0\n\t# Keep going until run out of sound space or run out of file contents\n\t\twhile (soundIndex < getLength(sound)) and (fileIndex < len(contents)):\n\t\tsample=float(contents[fileIndex])\n\t\t#Get the file line\n\t\tsetSampleValueAt(sound,soundIndex,sample)\n\t\tfileIndex = fileIndex + 1\n\t\tsoundIndex = soundIndex + 1\n\treturn sound",
"150" : "def soundToPicture(sound):\n\tpicture = makePicture(getMediaPath(\"640x480.jpg\"))\n\tsoundIndex = 0\n\tfor p in getPixels(picture):\n\t\tif soundIndex > getLength(sound):\n\t\t\tbreak\n\t\tsample = getSampleValueAt(sound,soundIndex)\n\t\tif sample > 1000:\n\t\t\tsetColor(p,red)\n\t\tif sample < -1000:\n\t\t\tsetColor(p,blue)\n\t\tif sample <= 1000 and sample >= -1000:\n\t\t\tsetColor(p,green)\n\t\tsoundIndex = soundIndex + 1\n\treturn picture",
"151" : "def pictureToSound(picture):\n\tsound = makeEmptySoundBySeconds(10)\n\tsndIndex = 0\n\tfor p in getPixels(picture):\n\t\tif sndIndex == getLength(sound):\n\t\t\tbreak\n\t\tif getRed(p) > 200:\n\t\t\tsetSampleValueAt(sound,sndIndex,1000)\n\t\telif getBlue(p) > 200 :\n\t\t\tsetSampleValueAt(sound,sndIndex,-1000)\n\t\telif getGreen(p) > 200:\n\t\t\tsetSampleValueAt(sound,sndIndex,0)\n\t\tsndIndex = sndIndex + 1\n\treturn(sound)",
"152" : "def soundToList(sound):\n\tlist = []\n\tfor s in getSamples(sound):\n\t\tlist = list + [getSampleValue(s)]\n\treturn list",
"153" : "def pictureToList(picture):\n\tlist = []\n\tfor p in getPixels(picture):\n\t\tlist = list + [[getX(p),getY(p),getRed(p),getGreen(p),getBlue(p)]]\n\treturn list",
"154" : "def listToPicture(list):\n\tpicture = makePicture(getMediaPath(\"640x480.jpg\"))\n\tfor p in list:\n\t\tif p[0] <= getWidth(picture) and p[1]<= getHeight(picture):\n\t\t\tsetColor(getPixel(picture,p[0],p[1]),makeColor(p[2],p[3],p[4]))\n\treturn picture",
"155" : "def encode(msgPic,original):\n\t# Assume msgPic and original have same dimensions\n\t# First, make all red pixels even\n\tfor pxl in getPixels(original):\n\t\t# Using modulo operator to test oddness\n\t\tif (getRed(pxl) % 2) == 1:\n\t\t\tsetRed(pxl, getRed(pxl) - 1)\n\t# Second, wherever there's black in msgPic\n\t# make odd the red in the corresponding original pixel\n\tfor x in range(0,getWidth(original)):\n\t\tfor y in range(0,getHeight(original)):\n\t\t\tmsgPxl = getPixel(msgPic,x,y)\n\t\t\torigPxl = getPixel(original,x,y)\n\t\t\tif (distance(getColor(msgPxl),black) < 100.0):\n\t\t\t\t# It's a message pixel! Make the red value odd.\n\t\t\t\tsetRed(origPxl, getRed(origPxl)+1)",
"156" : "def decode(encodedImg):\n\t# Takes in an encoded image. Return the original message\n\tmessage = makeEmptyPicture(getWidth(encodedImg),getHeight(encodedImg))\n\tfor x in range(0,getWidth(encodedImg)):\n\t\tfor y in range(0,getHeight(encodedImg)):\n\t\t\tencPxl = getPixel(encodedImg,x,y)\n\t\t\tmsgPxl = getPixel(message,x,y)\n\t\t\tif (getRed(encPxl) % 2) == 1:\n\t\t\t\tsetColor(msgPxl,black)\n\treturn message",
"157" : "def encodeSound(sound,picture):\n\tsoundIndex = 0\n\tfor p in getPixels(picture):\n\t\t# Clear out the red LSB\n\t\tr = getRed(p)\n\t\tif ((r % 2) == 1):\n\t\t\tsetRed(p,r-1)\n\tfor p in getPixels(picture):\n\t\t# Did we run out of sound?\n\t\tif soundIndex == getLength(sound):\n\t\t\tbreak\n\t\t# Get the sample value\n\t\tvalue = getSampleValueAt(sound,soundIndex)\n\t\tif value > 0:\n\t\t\tsetRed(p,getRed(p)+1)\n\t\tsoundIndex = soundIndex + 1",
"158" : "def decodeSound(picture):\n\tsound = makeEmptySoundBySeconds(5)\n\tsndIndex = 0\n\tfor p in getPixels(picture):\n\t\t# Did we run out of sound?\n\t\tif sndIndex == getLength(sound):\n\t\t\tbreak\n\t\t# Is it mostly red, mostly blue, or mostly green?\n\t\tif ((getRed(p) % 2) == 1):\n\t\t\tsetSampleValueAt(sound,sndIndex,32000)\n\t\telse:\n\t\t\tsetSampleValueAt(sound,sndIndex,-32000)\n\t\tsndIndex = sndIndex + 1\n\treturn(sound)"
}